version: '3.8'

services:
  # Redis Cache
  cache:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # FastAPI Backend
  api:
    build:
      context: ../backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - POSTGRES_URL=${POSTGRES_URL}
      - REDIS_URL=redis://cache:6379/0
      - PROJECTIONS_API_KEY=${PROJECTIONS_API_KEY:-}
      - SPORTS_DATA_API_KEY=${PROJECTIONS_API_KEY:-}
      - INJURIES_API_KEY=${INJURIES_API_KEY:-}
      - LLM_API_KEY=${LLM_API_KEY:-}
      - SLEEPER_LEAGUE_ID=${SLEEPER_LEAGUE_ID:-}
      - SCORING_JSON={"pass_yd":0.04,"pass_td":4,"int":-2,"rush_yd":0.1,"rush_td":6,"rec":1,"rec_yd":0.1,"rec_td":6,"fumble":-2}
      - DEBUG=false
    ports:
      - "8000:8000"
    depends_on:
      cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import http.client; conn = http.client.HTTPConnection('127.0.0.1', 8000); conn.request('GET', '/healthz'); res = conn.getresponse(); exit(0 if res.status == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Next.js Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy

  # Background Workers (optional - can be run separately)
  workers:
    build:
      context: ../backend
      dockerfile: Dockerfile
    restart: unless-stopped
    command: ["python", "app/workers/scheduler.py"]
    environment:
      - POSTGRES_URL=${POSTGRES_URL}
      - REDIS_URL=redis://cache:6379/0
      - PROJECTIONS_API_KEY=${PROJECTIONS_API_KEY:-}
      - SPORTS_DATA_API_KEY=${PROJECTIONS_API_KEY:-}
      - INJURIES_API_KEY=${INJURIES_API_KEY:-}
      - DEBUG=false
      - PYTHONPATH=/app
    depends_on:
      cache:
        condition: service_healthy

volumes:
  postgres_data:

networks:
  default:
    name: fantasy-network